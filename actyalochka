import ccxt
import pandas as pd
import streamlit as st
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
from streamlit_autorefresh import st_autorefresh


# Функция для получения данных с Coinbase API
def fetch_coinbase_data(symbol='BTC-USD', timeframe='1m', limit=180):
    try:
        exchange = ccxt.coinbase()  # Используем Coinbase API
        since = int((datetime.now() - timedelta(days=1)).timestamp() * 1000)  # Данные за последние 24 часа
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=limit)

        # Преобразуем данные в DataFrame
        data = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
        data['timestamp'] = pd.to_datetime(data['timestamp'], unit='ms')
        return data
    except Exception as e:
        st.error(f"Ошибка при запросе данных: {e}")
        return None


# Функция для расчета индикаторов
def calculate_indicators(data):
    # Скользящая средняя (SMA)
    data['SMA50'] = data['close'].rolling(window=50).mean()

    # RSI
    delta = data['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    data['RSI'] = 100 - (100 / (1 + rs))

    # MACD
    ema12 = data['close'].ewm(span=12, adjust=False).mean()
    ema26 = data['close'].ewm(span=26, adjust=False).mean()
    data['MACD'] = ema12 - ema26
    data['Signal Line'] = data['MACD'].ewm(span=9, adjust=False).mean()

    # Bollinger Bands
    data['BB_Mid'] = data['close'].rolling(window=20).mean()
    data['BB_Upper'] = data['BB_Mid'] + 2 * data['close'].rolling(window=20).std()
    data['BB_Lower'] = data['BB_Mid'] - 2 * data['close'].rolling(window=20).std()

    # Stochastic Oscillator
    data['Stochastic_K'] = ((data['close'] - data['low'].rolling(window=14).min()) /
                            (data['high'].rolling(window=14).max() - data['low'].rolling(window=14).min())) * 100
    data['Stochastic_D'] = data['Stochastic_K'].rolling(window=3).mean()


# Генерация всех торговых сигналов
def generate_signals(data):
    signals = []
    details = {}

    # RSI
    rsi_value = data['RSI'].iloc[-1]
    if rsi_value < 30:
        signals.append("Покупка: Актив перепродан, RSI ниже 30.")
        details['RSI'] = f"RSI = {rsi_value:.2f} (перепродан)"
    elif rsi_value > 70:
        signals.append("Продажа: Актив перекуплен, RSI выше 70.")
        details['RSI'] = f"RSI = {rsi_value:.2f} (перекуплен)"
    else:
        details['RSI'] = f"RSI = {rsi_value:.2f} (нейтрально)"

    # MACD
    macd_value = data['MACD'].iloc[-1]
    signal_line = data['Signal Line'].iloc[-1]
    if macd_value > signal_line:
        signals.append("Покупка: MACD пересек сигнальную линию снизу вверх.")
        details['MACD'] = f"MACD = {macd_value:.2f}, Сигнальная линия = {signal_line:.2f} (бычий сигнал)"
    elif macd_value < signal_line:
        signals.append("Продажа: MACD пересек сигнальную линию сверху вниз.")
        details['MACD'] = f"MACD = {macd_value:.2f}, Сигнальная линия = {signal_line:.2f} (медвежий сигнал)"
    else:
        details['MACD'] = f"MACD = {macd_value:.2f}, Сигнальная линия = {signal_line:.2f} (нейтрально)"

    # Bollinger Bands
    bb_upper = data['BB_Upper'].iloc[-1]
    bb_lower = data['BB_Lower'].iloc[-1]
    close_price = data['close'].iloc[-1]
    if close_price > bb_upper:
        signals.append("Продажа: Цена выше верхней полосы Боллинджера (перекупленность).")
        details['Bollinger Bands'] = f"Цена = {close_price:.2f}, Верхняя полоса = {bb_upper:.2f} (перекупленность)"
    elif close_price < bb_lower:
        signals.append("Покупка: Цена ниже нижней полосы Боллинджера (перепроданность).")
        details['Bollinger Bands'] = f"Цена = {close_price:.2f}, Нижняя полоса = {bb_lower:.2f} (перепроданность)"
    else:
        details['Bollinger Bands'] = f"Цена = {close_price:.2f} (в пределах полос)"

    # Stochastic Oscillator
    stochastic_k = data['Stochastic_K'].iloc[-1]
    if stochastic_k > 80:
        signals.append("Продажа: Стохастик показывает перекупленность (>80).")
        details['Stochastic'] = f"%K = {stochastic_k:.2f} (перекупленность)"
    elif stochastic_k < 20:
        signals.append("Покупка: Стохастик показывает перепроданность (<20).")
        details['Stochastic'] = f"%K = {stochastic_k:.2f} (перепроданность)"
    else:
        details['Stochastic'] = f"%K = {stochastic_k:.2f} (нейтрально)"

    return signals, details


# Общий анализ на основе всех индикаторов
def aggregate_analysis(data):
    weights = {"RSI": 1, "MACD": 1, "Bollinger Bands": 1, "Stochastic": 1}
    score = 0

    # RSI
    if data['RSI'].iloc[-1] < 30:
        score += weights["RSI"]
    elif data['RSI'].iloc[-1] > 70:
        score -= weights["RSI"]

    # MACD
    if data['MACD'].iloc[-1] > data['Signal Line'].iloc[-1]:
        score += weights["MACD"]
    elif data['MACD'].iloc[-1] < data['Signal Line'].iloc[-1]:
        score -= weights["MACD"]

    # Bollinger Bands
    if data['close'].iloc[-1] < data['BB_Lower'].iloc[-1]:
        score += weights["Bollinger Bands"]
    elif data['close'].iloc[-1] > data['BB_Upper'].iloc[-1]:
        score -= weights["Bollinger Bands"]

    # Stochastic Oscillator
    if data['Stochastic_K'].iloc[-1] < 20:
        score += weights["Stochastic"]
    elif data['Stochastic_K'].iloc[-1] > 80:
        score -= weights["Stochastic"]

    # Анализ по шкале
    if score >= 3:
        return "Сильная покупка"
    elif score <= -3:
        return "Сильная продажа"
    elif score > 0:
        return "Покупка"
    elif score < 0:
        return "Продажа"
    else:
        return "Нейтрально"


# Функции для отображения графиков индикаторов
def plot_price_chart(data):
    st.write("### Общий график цен")
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(data['timestamp'], data['close'], label='Цена закрытия', color='blue')
    ax.set_xlabel("Время")
    ax.set_ylabel("Цена (USD)")
    ax.legend()
    st.pyplot(fig)


def plot_sma_chart(data):
    st.write("#### SMA (50)")
    fig, ax = plt.subplots(figsize=(5, 3))
    ax.plot(data['timestamp'], data['close'], label='Цена закрытия', color='blue')
    ax.plot(data['timestamp'], data['SMA50'], label='SMA (50)', color='red')
    ax.set_xlabel("Время")
    ax.set_ylabel("Цена (USD)")
    ax.legend()
    st.pyplot(fig)


def plot_bollinger_chart(data):
    st.write("#### Bollinger Bands")
    fig, ax = plt.subplots(figsize=(5, 3))
    ax.plot(data['timestamp'], data['close'], label='Цена закрытия', color='blue')
    ax.plot(data['timestamp'], data['BB_Upper'], label='Верхняя полоса Боллинджера', color='green', linestyle='--')
    ax.plot(data['timestamp'], data['BB_Lower'], label='Нижняя полоса Боллинджера', color='red', linestyle='--')
    ax.set_xlabel("Время")
    ax.set_ylabel("Цена (USD)")
    ax.legend()
    st.pyplot(fig)


def plot_stochastic_chart(data):
    st.write("#### Stochastic Oscillator")
    fig, ax = plt.subplots(figsize=(5, 3))
    ax.plot(data['timestamp'], data['Stochastic_K'], label='%K', color='purple')
    ax.plot(data['timestamp'], data['Stochastic_D'], label='%D', color='orange', linestyle='--')
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))
    ax.set_xlabel("Время")
    ax.set_ylabel("Стохастик")
    ax.legend()
    st.pyplot(fig)


def plot_macd_chart(data):
    st.write("#### MACD")
    fig, ax = plt.subplots(figsize=(5, 3))
    ax.plot(data['timestamp'], data['MACD'], label='MACD', color='cyan')
    ax.plot(data['timestamp'], data['Signal Line'], label='Сигнальная линия MACD', color='magenta', linestyle='--')
    ax.xaxis.set_major_locator(MaxNLocator(integer=True))
    ax.set_xlabel("Время")
    ax.set_ylabel("MACD")
    ax.legend()
    st.pyplot(fig)


# Streamlit приложение
def main():
    st.set_page_config(page_title="Криптовалютный анализ", layout="wide")

    # Заголовок
    st.title("Криптовалютный анализ")
    st.subheader("BTC-USD")

    # Автообновление через таймер
    refresh_interval = st.number_input("Интервал автообновления (в секундах)", min_value=10, max_value=3600, value=60)
    st_autorefresh(interval=refresh_interval * 1000, limit=None, key="auto_refresh")

    # Получение данных
    with st.spinner("Загружаются данные..."):
        data = fetch_coinbase_data()

    if data is not None:
        calculate_indicators(data)

        # Общий график цен
        plot_price_chart(data)

        # Разделить экран на 4 части для индикаторов
        st.write("### Индикаторы")
        col1, col2 = st.columns(2)
        col3, col4 = st.columns(2)

        # Графики индикаторов
        with col1:
            plot_sma_chart(data)

        with col2:
            plot_bollinger_chart(data)

        with col3:
            plot_stochastic_chart(data)

        with col4:
            plot_macd_chart(data)

        # Текущая информация
        st.write("### Текущая информация")
        st.write(f"Последнее обновление: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        st.write(f"Цена закрытия: {data['close'].iloc[-1]:.2f} USD")

        # Общий анализ рынка
        st.write("### Общий анализ рынка")
        overall_analysis = aggregate_analysis(data)
        st.write(f"**{overall_analysis}**")

        # Торговые сигналы
        signals, details = generate_signals(data)
        st.write("### Торговые сигналы")
        for signal in signals:
            st.write(f"- {signal}")

        # Детали индикаторов
        st.write("### Детали индикаторов")
        for key, value in details.items():
            st.write(f"- {key}: {value}")


if __name__ == "__main__":
    main()
